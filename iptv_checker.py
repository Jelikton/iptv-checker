import re
import requests
import subprocess
import sys
import platform
import os
import gzip
import xml.etree.ElementTree as ET
import json
import shutil # <--- –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
from datetime import datetime, timezone
from dateutil.parser import parse as parse_datetime
from typing import List, Dict, Optional, Tuple, Any
from packaging import version as packaging_version # <--- –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π

# --- Rich Console ---
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import track
from rich.text import Text

console = Console()

# --- –í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---
CURRENT_VERSION = "1.0"
# !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏ –Ω–∞ –°–í–û–ô —Ä–µ–∞–ª—å–Ω—ã–π URL –∫ —Ñ–∞–π–ª—É version.json !!!
VERSION_URL = "YOUR_JSON_METADATA_URL_HERE" # –ù–∞–ø—Ä–∏–º–µ—Ä, "https://raw.githubusercontent.com/user/repo/main/version.json"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
M3U_FILE = "channels.m3u"
JSON_CACHE_FILE = "channels.json"

# --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ---
ChannelInfo = Dict[str, Any]
EPGData = Dict[str, List[Tuple[datetime, datetime, str]]]

# --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ ---
def clear_console():
    command = 'cls' if platform.system() == "Windows" else 'clear'
    os.system(command)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –∫–µ—à–µ–º –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_channels_from_json(filepath: str = JSON_CACHE_FILE) -> Optional[List[ChannelInfo]]:
    if not os.path.exists(filepath): return None
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            channels = json.load(f)
            if isinstance(channels, list) and all(isinstance(ch, dict) for ch in channels):
                 # console.print(f"[dim]–ö–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ '{filepath}'.[/dim]")
                 for i, ch in enumerate(channels): ch.setdefault('number', i + 1)
                 return channels
            else: return None
    except Exception: return None

def save_channels_to_json(channels: List[ChannelInfo], filepath: str = JSON_CACHE_FILE):
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(channels, f, ensure_ascii=False, indent=2)
        # console.print(f"[dim]–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{filepath}'.[/dim]")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON '{filepath}':[/red] {e}")

# --- –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ M3U (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def parse_m3u(filepath: str = M3U_FILE) -> Tuple[Optional[str], List[ChannelInfo]]:
    channels: List[ChannelInfo] = []
    current_channel_info: ChannelInfo = {}
    epg_url: Optional[str] = None
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line: continue
                if line.startswith('#EXTM3U'):
                    match = re.search(r'url-tvg="([^"]*)"', line)
                    if match: epg_url = match.group(1)
                    continue
                elif line.startswith('#EXTINF:'):
                    parts = line.split(',', 1); info_part = parts[0]; name_part = parts[1] if len(parts) > 1 else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    current_channel_info = {'name': name_part.strip()}
                    match = re.search(r'tvg-name="([^"]*)"', info_part); current_channel_info['tvg_name'] = match.group(1) if match else current_channel_info['name']
                    match = re.search(r'tvg-logo="([^"]*)"', info_part); current_channel_info['logo'] = match.group(1) if match else None
                    match = re.search(r'group-title="([^"]*)"', info_part); current_channel_info['group'] = match.group(1) if match else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
                    match = re.search(r'tvg-id="([^"]*)"', info_part); current_channel_info['id'] = match.group(1) if match else None
                    current_channel_info['_waiting_for_url'] = True
                elif not line.startswith('#') and current_channel_info.get('_waiting_for_url'):
                    current_channel_info['url'] = line; del current_channel_info['_waiting_for_url']
                    current_channel_info['number'] = len(channels) + 1
                    channels.append(current_channel_info); current_channel_info = {}
    except FileNotFoundError: console.print(f"[bold red]–û—à–∏–±–∫–∞:[/bold red] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª '{filepath}'."); return None, []
    except Exception as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è M3U '{filepath}':[/bold red] {e}"); return None, []
    return epg_url, channels

# --- –§—É–Ω–∫—Ü–∏–∏ EPG, –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, –∑–∞–ø—É—Å–∫–∞ –ø–ª–µ–µ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def download_and_parse_epg(url: Optional[str]) -> EPGData:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if not url: return {}
    epg_data: EPGData = {}
    timeout = 60
    try:
        headers = {'User-Agent': 'IPTV Checker Script'}
        response = requests.get(url, stream=True, timeout=timeout, headers=headers)
        response.raise_for_status()
        # console.print(f"  [dim]EPG: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞...[/dim]")
        decompressed_data = bytearray()
        chunk_size=8192; processed_chunks=0; gzip_stream=gzip.GzipFile(fileobj=response.raw)
        while True:
            try: chunk = gzip_stream.read(chunk_size);
            except EOFError: break
            except gzip.BadGzipFile: console.print(f"[bold red]–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π gzip EPG.[/bold red]"); return {}
            except Exception as read_err: console.print(f"[bold red]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è EPG: {read_err}[/bold red]"); return {}
            if not chunk: break
            decompressed_data.extend(chunk); processed_chunks += 1
            # if processed_chunks % 500 == 0: console.print(f"    [dim]~{processed_chunks * chunk_size // 1024 // 1024} MB EPG...[/dim]")
        # console.print(f"  [dim]EPG: –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ ~{len(decompressed_data) // 1024 // 1024} MB. –ü–∞—Ä—Å–∏–Ω–≥ XML...[/dim]")
        if not decompressed_data: return {}
        try:
            root = ET.fromstring(decompressed_data); program_count = 0; programs_list = root.findall('programme'); total_programs = len(programs_list)
            for programme in programs_list:
                channel_id = programme.get('channel'); start_str = programme.get('start'); stop_str = programme.get('stop'); title_elem = programme.find('title')
                if channel_id and start_str and stop_str and title_elem is not None and title_elem.text:
                    try:
                        start_time = parse_datetime(start_str); stop_time = parse_datetime(stop_str); title = title_elem.text.strip()
                        if channel_id not in epg_data: epg_data[channel_id] = []
                        epg_data[channel_id].append((start_time, stop_time, title)); program_count += 1
                    except Exception: pass
            # console.print(f"  [dim]EPG: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {program_count} –∑–∞–ø–∏—Å–µ–π.[/dim]")
        except ET.ParseError as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML EPG.[/bold red]"); return {}
        for channel_id in epg_data: epg_data[channel_id].sort(key=lambda x: x[0])
        # console.print(f"[green]EPG –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.[/green]")
        return epg_data
    except requests.exceptions.Timeout: console.print(f"[bold red]–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EPG: –¢–∞–π–º–∞—É—Ç.[/bold red]"); return {}
    except requests.exceptions.RequestException as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EPG: {e}[/bold red]"); return {}
    except Exception as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ EPG: {e}[/bold red]"); return {}

def find_current_program(channel_id: Optional[str], epg_data: EPGData) -> Optional[str]:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if not channel_id or channel_id not in epg_data: return None
    now = datetime.now(timezone.utc)
    programs = epg_data[channel_id]
    for start, stop, title in programs:
        try:
            start_aware = start.astimezone(timezone.utc) if start.tzinfo else start.replace(tzinfo=timezone.utc)
            stop_aware = stop.astimezone(timezone.utc) if stop.tzinfo else stop.replace(tzinfo=timezone.utc)
            if start_aware <= now < stop_aware: return title
        except Exception: continue
    return None

def check_channel_availability(url: Optional[str], timeout: int = 5) -> Tuple[str, Optional[int]]:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if not url or not url.lower().startswith(('http://', 'https://')): return "[grey50]‚ö™ –ù–µ HTTP(S)[/grey50]", None
    headers = {'User-Agent': 'IPTV Checker Script'}; status_style, status_text, status_code = "white", "", None
    try:
        if url.lower().endswith('.mpd'): status_text, status_code, status_style = "‚ö™ DASH (.mpd)", None, "cyan"
        else:
            response = requests.head(url, timeout=timeout, headers=headers, allow_redirects=True, stream=False); status_code = response.status_code
            if 200 <= status_code < 300: status_text, status_style = "‚úÖ OK", "green"
            elif status_code == 404: status_text, status_style = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω", "red"
            elif status_code == 403: status_text, status_style = "üö´ –ó–∞–ø—Ä–µ—â–µ–Ω", "yellow"
            elif status_code == 405: status_text, status_style = "üü° –ú–µ—Ç–æ–¥ HEAD –∑–∞–ø—Ä–µ—â–µ–Ω", "yellow"
            else: status_text, status_style = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {status_code}", "yellow"
    except requests.exceptions.Timeout: status_text, status_style = "‚è≥ –¢–∞–π–º–∞—É—Ç", "orange3"
    except requests.exceptions.ConnectionError: status_text, status_style = "üîó –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "red"
    except requests.exceptions.RequestException: status_text, status_style = "‚ùì –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", "magenta"
    except Exception as e: status_text, status_style = f"üÜò –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({e})", "grey50"
    return f"[{status_style}]{status_text}[/{status_style}]", status_code

def open_in_player(url: Optional[str]):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if not url: console.print("[red]–û—à–∏–±–∫–∞: URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.[/red]"); return
    player_found = False; system = platform.system(); commands = []
    vlc_path_x86 = r'C:\Program Files (x86)\VideoLAN\VLC\vlc.exe'; vlc_path_x64 = r'C:\Program Files\VideoLAN\VLC\vlc.exe'
    if system == "Windows": commands = [['vlc', url], [vlc_path_x86, url], [vlc_path_x64, url]]
    elif system == "Darwin": commands = [['open', url], ['open', '-a', 'VLC', url]]
    elif system == "Linux": commands = [['xdg-open', url], ['vlc', url]]
    else: console.print(f"[yellow]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–° ({system}).[/yellow]"); return
    console.print(f"\n–ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL: [cyan]{url}[/cyan]")
    for cmd in commands:
        try:
            is_vlc_path = cmd[0].lower() in [vlc_path_x86.lower(), vlc_path_x64.lower()]
            if is_vlc_path and not os.path.exists(cmd[0]): continue
            process = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            try: process.wait(timeout=0.7)
            except subprocess.TimeoutExpired: pass
            else:
                if process.returncode != 0: continue
            player_found = True; console.print("  [green]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞![/green]"); break
        except FileNotFoundError: continue
        except OSError as e: console.print(f"  [red]–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]"); continue
        except Exception as e: console.print(f"  [red]–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {e}[/red]"); continue
    if not player_found:
        console.print("[bold red]\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–µ–µ—Ä.[/bold red]")
        if system == "Windows": console.print(f"–ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç–∏ VLC –∏–ª–∏ –¥–æ–±–∞–≤—å –≤ PATH.")
        else: console.print("–£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–ª–µ–µ—Ä (VLC) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def display_channels_table(channels: List[ChannelInfo], epg: EPGData, statuses: Dict[int, str], filter_group: Optional[str] = None, search_term: Optional[str] = None) -> Optional[Dict[int, int]]:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    table = Table(title="–°–ø–∏—Å–æ–∫ –ö–∞–Ω–∞–ª–æ–≤", show_header=True, header_style="bold magenta")
    table.add_column("‚Ññ (–æ—Ä–∏–≥.)", style="dim", width=5, justify="right")
    table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞–Ω–∞–ª–∞", style="cyan", no_wrap=True, min_width=20)
    table.add_column("–ì—Ä—É–ø–ø–∞", style="yellow", width=15)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=25)
    table.add_column("–°–µ–π—á–∞—Å –≤ —ç—Ñ–∏—Ä–µ", style="green", min_width=20, overflow="fold")
    count = 0; displayed_channel_indices = {}
    for i, channel in enumerate(channels):
        original_number = channel.get('number', i + 1)
        name = channel.get('tvg_name') or channel.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'); group = channel.get('group', '–ë–µ–∑ –≥—Ä—É–ø–ø—ã')
        status = statuses.get(original_number, "[grey50]–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω[/grey50]"); channel_id = channel.get('id')
        if filter_group and group != filter_group: continue
        if search_term and search_term.lower() not in name.lower(): continue
        now_playing = find_current_program(channel_id, epg) or "[dim]N/A[/dim]"
        count += 1; displayed_channel_indices[count] = i
        table.add_row(str(original_number), name, group, status, now_playing)
    if count == 0: console.print(Panel("[yellow]–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.[/yellow]", title="–†–µ–∑—É–ª—å—Ç–∞—Ç")); return None
    else: console.print(table); return displayed_channel_indices

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
def check_for_updates(current_ver: str, version_url: str) -> Optional[Tuple[str, str, str]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    if not version_url or version_url == "YOUR_JSON_METADATA_URL_HERE":
        # console.print("[dim]URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –∑–∞–¥–∞–Ω.[/dim]")
        return None # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

    console.print(f"[INFO] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å [cyan]{version_url}[/cyan]...")
    try:
        headers = {'User-Agent': 'IPTV Checker Update Client'}
        response = requests.get(version_url, timeout=10, headers=headers)
        response.raise_for_status()
        data = response.json()

        latest_version_str = data.get("version")
        download_url = data.get("url")
        changelog = data.get("changelog", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.")

        if not latest_version_str or not download_url:
            console.print("[yellow]–û—à–∏–±–∫–∞:[/yellow] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ version.json (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'version' –∏–ª–∏ 'url').")
            return None

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º packaging.version –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
        current = packaging_version.parse(current_ver)
        latest = packaging_version.parse(latest_version_str)

        if latest > current:
            console.print(f"[bold green]–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {latest_version_str}[/bold green] (–¢–µ–∫—É—â–∞—è: {current_ver})")
            console.print(f"[bold]–ò–∑–º–µ–Ω–µ–Ω–∏—è:[/bold] {changelog}")
            return latest_version_str, download_url, changelog
        else:
            console.print("[green]–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.[/green]")
            return None

    except requests.exceptions.RequestException as e:
        console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏):[/yellow] {e}")
        return None
    except json.JSONDecodeError:
        console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON).[/yellow]")
        return None
    except packaging_version.InvalidVersion:
         console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏).[/yellow]")
         return None
    except Exception as e:
        console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞):[/yellow] {e}")
        return None

def download_and_apply_update(download_url: str) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π."""
    console.print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å [cyan]{download_url}[/cyan]...")
    try:
        headers = {'User-Agent': 'IPTV Checker Update Client'}
        response = requests.get(download_url, stream=True, timeout=60, headers=headers)
        response.raise_for_status()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
        current_script_path = os.path.abspath(sys.argv[0])
        script_dir = os.path.dirname(current_script_path)
        script_name = os.path.basename(current_script_path)
        new_script_path = os.path.join(script_dir, f"{script_name}.new")
        old_script_path = os.path.join(script_dir, f"{script_name}.old")

        console.print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –≤: [dim]{new_script_path}[/dim]")
        with open(new_script_path, 'wb') as f:
            total_downloaded = 0
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
                total_downloaded += len(chunk)
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        console.print(f"–°–∫–∞—á–∞–Ω–æ {total_downloaded // 1024} KB. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞...")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if os.path.exists(old_script_path):
            try:
                os.remove(old_script_path)
                console.print(f"  [dim]–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_script_path}[/dim]")
            except Exception as e_rem:
                 console.print(f"  [yellow]–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø {old_script_path}: {e_rem}[/yellow]")


        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –≤ .old
        try:
             shutil.move(current_script_path, old_script_path)
             # os.rename(current_script_path, old_script_path) # os.rename –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–∂–¥—É –¥–∏—Å–∫–∞–º–∏
             console.print(f"  [dim]–¢–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {old_script_path}[/dim]")
        except Exception as e_ren_old:
            console.print(f"  [bold red]–û—à–∏–±–∫–∞:[/bold red] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –≤ {old_script_path}: {e_ren_old}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .new, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫–∞—á–∞–Ω
            if os.path.exists(new_script_path): os.remove(new_script_path)
            return False

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
        try:
            shutil.move(new_script_path, current_script_path)
            # os.rename(new_script_path, current_script_path)
            console.print(f"  [dim]–ù–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞: {current_script_path}[/dim]")
            return True # –£—Å–ø–µ—Ö!
        except Exception as e_ren_new:
            console.print(f"  [bold red]–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:[/bold red] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {new_script_path} –≤ {current_script_path}: {e_ren_new}")
            console.print(f"  [bold yellow]–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ {old_script_path}...[/bold yellow]")
            try:
                shutil.move(old_script_path, current_script_path)
                console.print("  [green]–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.[/green]")
            except Exception as e_recover:
                 console.print(f"  [bold red]–ù–ï –£–î–ê–õ–û–°–¨ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é: {e_recover}[/bold red]")
                 console.print(f"  [bold red]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞! –§–∞–π–ª—ã: {old_script_path} (—Å—Ç–∞—Ä—ã–π), {new_script_path} (–Ω–æ–≤—ã–π)[/bold red]")
            return False


    except requests.exceptions.RequestException as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:[/red] {e}")
        return False
    except IOError as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:[/red] {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å .new —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
        new_script_path_err = os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), f"{os.path.basename(sys.argv[0])}.new")
        if os.path.exists(new_script_path_err):
            try: os.remove(new_script_path_err)
            except: pass
        return False
    except Exception as e:
        console.print(f"[red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:[/red] {e}")
        return False

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ (–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ---
if __name__ == "__main__":
    update_info = None # –•—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

    # --- –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
    clear_console()
    console.print(Panel(f"üì∫ IPTV Checker & Launcher v{CURRENT_VERSION} üì∫",
                        style="bold blue",
                        title_align="center",
                        subtitle="–ê–≤—Ç–æ—Ä: t.me/jeliktontech"))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    update_info = check_for_updates(CURRENT_VERSION, VERSION_URL)
    if update_info:
        latest_v, download_url, _ = update_info
        update_choice = console.input(f"–û–±–Ω–æ–≤–∏—Ç—å –¥–æ –≤–µ—Ä—Å–∏–∏ {latest_v}? (y/n): ").strip().lower()
        if update_choice == 'y':
            success = download_and_apply_update(download_url)
            if success:
                console.print("[bold green]\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.[/bold green]")
                sys.exit(0) # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            else:
                console.print("[bold red]\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π.[/bold red]")
        else:
            console.print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: JSON –∏–ª–∏ M3U ---
    channel_list: Optional[List[ChannelInfo]] = load_channels_from_json()
    epg_url_from_m3u = None
    if channel_list is None:
        console.print(f"\n[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ [cyan]{M3U_FILE}[/cyan]...")
        epg_url_from_m3u, channel_list = parse_m3u(M3U_FILE)
        if channel_list: save_channels_to_json(channel_list)
        else: console.print("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã. –í—ã—Ö–æ–¥.[/bold red]"); sys.exit(1)
    # --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ ---

    console.print(f"[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channel_list)}")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ EPG ---
    epg_url_to_use = epg_url_from_m3u # TODO: –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ JSON, –µ—Å–ª–∏ –µ—Å—Ç—å
    epg_data: EPGData = download_and_parse_epg(epg_url_to_use)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ---
    console.print("\n[INFO] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤...")
    channel_statuses: Dict[int, str] = {}
    for i in track(range(len(channel_list)), description="–ü—Ä–æ–≤–µ—Ä–∫–∞..."):
        channel = channel_list[i]; index = channel.get('number', i + 1); url = channel.get('url')
        status_text, _ = check_channel_availability(url); channel_statuses[index] = status_text
    console.print("[green]–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/green]")

    # --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é ---
    # (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ–Ω—é –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, —á—Ç–æ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ)
    current_filter_group = None; current_search_term = None; last_displayed_map = None
    while True:
        console.print("\n" + "="*30 + " –ú–µ–Ω—é " + "="*30)
        # ... (–ø—É–Ω–∫—Ç—ã –º–µ–Ω—é 1-5 –∏ q) ...
        console.print("[1] –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        console.print("[2] –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ")
        console.print("[3] –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        console.print("[4] –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ –Ω–æ–º–µ—Ä—É (–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞)")
        console.print("[5] –û–±–Ω–æ–≤–∏—Ç—å URL –∫–∞–Ω–∞–ª–∞ (–ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É)")
        # –î–æ–±–∞–≤–∏–º –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        console.print("[u] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑")
        console.print("[q] –í—ã—Ö–æ–¥")
        console.print("-" * 66)

        choice = console.input("[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:[/bold cyan] ").strip().lower()
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # clear_console() # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á–∏—Å—Ç–∏—Ç—å *–¥–æ* –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ clear_console() –≤—ã—à–µ
        # console.print(Panel(f"üì∫ v{CURRENT_VERSION} üì∫", ... subtitle="..."))

        if choice == '1':
             clear_console() # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Ç–∞–±–ª–∏—Ü—ã
             console.print(Panel(f"üì∫ v{CURRENT_VERSION} üì∫", style="bold blue", subtitle="–ê–≤—Ç–æ—Ä: t.me/jeliktontech"))
             last_displayed_map = display_channels_table(channel_list, epg_data, channel_statuses, filter_group=current_filter_group, search_term=current_search_term)
        elif choice == '2':
             clear_console()
             console.print(Panel(f"üì∫ v{CURRENT_VERSION} üì∫", style="bold blue", subtitle="–ê–≤—Ç–æ—Ä: t.me/jeliktontech"))
             # ... (–ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥—Ä—É–ø–ø–µ) ...
             groups = sorted(list(set(ch.get('group', '–ë–µ–∑ –≥—Ä—É–ø–ø—ã') for ch in channel_list)))
             console.print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
             for idx, grp in enumerate(groups): console.print(f"  [{idx+1}] {grp}")
             try:
                group_choice_idx = int(console.input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–∏–ª–∏ 0 –¥–ª—è —Å–±—Ä–æ—Å–∞): "))
                if group_choice_idx == 0: current_filter_group = None; console.print("[INFO] –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ —Å–±—Ä–æ—à–µ–Ω.")
                elif 1 <= group_choice_idx <= len(groups): current_filter_group = groups[group_choice_idx - 1]
                else: console.print("[yellow]–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.[/yellow]"); continue
                last_displayed_map = display_channels_table(channel_list, epg_data, channel_statuses, filter_group=current_filter_group, search_term=current_search_term)
             except ValueError: console.print("[yellow]–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.[/yellow]")

        elif choice == '3':
             clear_console()
             console.print(Panel(f"üì∫ v{CURRENT_VERSION} üì∫", style="bold blue", subtitle="–ê–≤—Ç–æ—Ä: t.me/jeliktontech"))
             # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞) ...
             search_input = console.input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–ø—É—Å—Ç–æ –¥–ª—è —Å–±—Ä–æ—Å–∞): ").strip()
             if not search_input: current_search_term = None; console.print("[INFO] –ü–æ–∏—Å–∫ —Å–±—Ä–æ—à–µ–Ω.")
             else: current_search_term = search_input
             last_displayed_map = display_channels_table(channel_list, epg_data, channel_statuses, filter_group=current_filter_group, search_term=current_search_term)

        elif choice == '4':
             # –û—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. –∑–∞–ø—É—Å–∫ –ø–ª–µ–µ—Ä–∞ - –≤–Ω–µ—à–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
             # ... (–ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞) ...
             if last_displayed_map is None: console.print("[yellow]–°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (–∫–æ–º–∞–Ω–¥–∞ 1).[/yellow]"); continue
             try:
                num_input = console.input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –¢–ï–ö–£–©–ï–ì–û —Å–ø–∏—Å–∫–∞: ")
                displayed_num = int(num_input)
                original_list_index = last_displayed_map.get(displayed_num)
                if original_list_index is not None and 0 <= original_list_index < len(channel_list):
                    selected_channel = channel_list[original_list_index]
                    console.print(f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª (–æ—Ä–∏–≥. #{selected_channel.get('number')}): [cyan]{selected_channel.get('tvg_name') or selected_channel.get('name')}[/cyan]")
                    open_in_player(selected_channel.get('url'))
                else: console.print(f"[yellow]–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.[/yellow]")
             except ValueError: console.print("[yellow]–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.[/yellow]")
             except Exception as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}[/bold red]")

        elif choice == '5':
             # –û—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. —ç—Ç–æ –¥–∏–∞–ª–æ–≥
             # ... (–ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL) ...
             try:
                num_input = console.input("–í–≤–µ–¥–∏—Ç–µ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL: ")
                target_channel_num = int(num_input)
                channel_to_update = None; channel_index = -1
                for i, ch in enumerate(channel_list):
                    if ch.get('number') == target_channel_num: channel_to_update = ch; channel_index = i; break
                if channel_to_update:
                    console.print(f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª #{target_channel_num}: [cyan]{channel_to_update.get('tvg_name') or channel_to_update.get('name')}[/cyan]")
                    console.print(f"–¢–µ–∫—É—â–∏–π URL: [dim]{channel_to_update.get('url', '–ù–µ—Ç')}[/dim]")
                    new_url = console.input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL: ").strip()
                    if new_url:
                        channel_list[channel_index]['url'] = new_url
                        console.print(f"[green]URL –¥–ª—è –∫–∞–Ω–∞–ª–∞ #{target_channel_num} –æ–±–Ω–æ–≤–ª–µ–Ω.[/green]")
                        save_channels_to_json(channel_list)
                        console.print("[INFO] –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
                        status_text, _ = check_channel_availability(new_url)
                        channel_statuses[target_channel_num] = status_text
                        console.print(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}")
                    else: console.print("[yellow]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/yellow]")
                else: console.print(f"[yellow]–ö–∞–Ω–∞–ª #{target_channel_num} –Ω–µ –Ω–∞–π–¥–µ–Ω.[/yellow]")
             except ValueError: console.print("[yellow]–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.[/yellow]")
             except Exception as e: console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}[/bold red]")

        elif choice == 'u': # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
             clear_console()
             console.print(Panel(f"üì∫ v{CURRENT_VERSION} üì∫", style="bold blue", subtitle="–ê–≤—Ç–æ—Ä: t.me/jeliktontech"))
             update_info = check_for_updates(CURRENT_VERSION, VERSION_URL)
             if update_info:
                 latest_v, download_url, _ = update_info
                 update_choice = console.input(f"–û–±–Ω–æ–≤–∏—Ç—å –¥–æ –≤–µ—Ä—Å–∏–∏ {latest_v}? (y/n): ").strip().lower()
                 if update_choice == 'y':
                     success = download_and_apply_update(download_url)
                     if success:
                         console.print("[bold green]\n–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.[/bold green]")
                         sys.exit(0)
                     else: console.print("[bold red]\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å.[/bold red]")
                 else: console.print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        elif choice == 'q':
             console.print("–í—ã—Ö–æ–¥."); break
        else:
             clear_console()
             console.print(Panel(f"üì∫ v{CURRENT_VERSION} üì∫", style="bold blue", subtitle="–ê–≤—Ç–æ—Ä: t.me/jeliktontech"))
             console.print("[yellow]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.[/yellow]")